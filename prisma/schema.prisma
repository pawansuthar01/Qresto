generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN  // Company Admin - Full access (can't create restaurants)
  ADMIN        // Company Owner - Can create restaurants + manage content
  OWNER        // Restaurant Owner
  MANAGER      // Restaurant Manager (future use)
  STAFF        // Restaurant Staff (future use)
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  SERVED
  CANCELLED
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  password      String?
  name          String?
  role          UserRole     @default(OWNER)
  image         String?
  emailVerified DateTime?
  
  // Restaurant relationship
  restaurantId  String?
  restaurant    Restaurant?  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@index([email])
  @@index([restaurantId])
  @@map("users")
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logoUrl     String?
  coverUrl    String?
  address     String?
  phone       String?
  email       String?
  
  // Status management
  status      String   @default("active") // "active", "suspended", "blocked"
  suspendedAt DateTime?
  suspendedReason String?
  
  // Permission system - stored as JSON
  permissions Json     @default("{}")
  
  // Customization settings
  customization Json   @default("{\"primaryColor\":\"#3b82f6\",\"secondaryColor\":\"#1e40af\",\"fontFamily\":\"Inter\",\"layout\":\"grid\"}")
  
  // Relations
  owners      User[]
  categories  MenuCategory[]
  items       MenuItem[]
  tables      Table[]
  qrCodes     QRCode[]
  orders      Order[]
  documents   Document[]
  media       Media[]
  
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([slug])
  @@index([status])
  @@map("restaurants")
}

model MenuCategory {
  id           String     @id @default(cuid())
  name         String
  description  String?
  displayOrder Int        @default(0)
  isActive     Boolean    @default(true)
  
  // Time-based scheduling
  scheduleType String     @default("always") // "always", "time-based", "date-based", "event-based"
  schedule     Json?      @default("{}") // Flexible schedule configuration
  
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  items        MenuItem[]
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  @@index([restaurantId])
  @@map("menu_categories")
}

model MenuItem {
  id           String       @id @default(cuid())
  name         String
  description  String?
  price        Float
  imageUrl     String?
  isAvailable  Boolean      @default(true)
  isVegetarian Boolean      @default(false)
  isVegan      Boolean      @default(false)
  isGlutenFree Boolean      @default(false)
  spiceLevel   Int?         @default(0)
  displayOrder Int          @default(0)
  
  // Enhanced metadata
  isPopular    Boolean      @default(false)
  isTrending   Boolean      @default(false)
  isNew        Boolean      @default(false)
  isChefSpecial Boolean     @default(false)
  rating       Float?
  orderCount   Int          @default(0)
  prepTime     Int?         // in minutes
  discount     Int?         // percentage
  originalPrice Float?
  
  categoryId   String
  category     MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  restaurantId String
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  orderItems   OrderItem[]
  
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  @@index([categoryId])
  @@index([restaurantId])
  @@map("menu_items")
}

model Table {
  id           String     @id @default(cuid())
  number       String
  name         String?
  capacity     Int        @default(4)
  isActive     Boolean    @default(true)
  
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  qrCodes      QRCode[]
  orders       Order[]
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  @@unique([restaurantId, number])
  @@index([restaurantId])
  @@map("tables")
}

model QRCode {
  id           String     @id @default(cuid())
  shortCode    String     @unique
  dataUrl      String     @db.Text
  isActive     Boolean    @default(true)
  scans        Int        @default(0)
  
  tableId      String
  table        Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)
  
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  @@index([shortCode])
  @@index([tableId])
  @@index([restaurantId])
  @@map("qr_codes")
}

model Order {
  id           String      @id @default(cuid())
  orderNumber  String      @unique
  status       OrderStatus @default(PENDING)
  totalAmount  Float
  notes        String?
  customerName String?
  customerPhone String?
  
  tableId      String
  table        Table       @relation(fields: [tableId], references: [id])
  
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  items        OrderItem[]
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  @@index([orderNumber])
  @@index([tableId])
  @@index([restaurantId])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  price      Float
  notes      String?
  
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([orderId])
  @@index([menuItemId])
  @@map("order_items")
}

model Document {
  id           String     @id @default(cuid())
  title        String
  content      String     @db.Text
  type         String     // "menu", "policy", "terms", "about", "contact"
  isPublished  Boolean    @default(false)
  slug         String
  
  restaurantId String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  // For company-wide documents (null restaurantId)
  isGlobal     Boolean    @default(false)
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  @@unique([restaurantId, slug])
  @@index([type])
  @@index([isGlobal])
  @@map("documents")
}

model Media {
  id           String     @id @default(cuid())
  filename     String
  url          String
  mimeType     String
  size         Int        // in bytes
  type         String     // "image", "video", "document"
  category     String?    // "menu", "logo", "banner", "other"
  
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime   @default(now())
  
  @@index([restaurantId])
  @@index([type])
  @@map("media")
}

model CompanyPage {
  id          String   @id @default(cuid())
  type        String   @unique // "about", "contact", "privacy", "terms"
  title       String
  content     String   @db.Text
  isPublished Boolean  @default(true)
  seoTitle    String?
  seoDescription String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("company_pages")
}