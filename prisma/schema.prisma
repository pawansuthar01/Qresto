generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  OWNER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  SERVED
  CANCELLED
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String?
  password      String?
  image         String?
  role          UserRole     @default(OWNER)
  restaurantId  String?
  restaurant    Restaurant?  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([email])
  @@index([restaurantId])
}

model Restaurant {
  id          String         @id @default(cuid())
  name        String
  slug        String         @unique
  logo        String?
  address     String?
  phone       String?
  permissions Json           @default("{}")
  customization Json         @default("{}")
  users       User[]
  categories  MenuCategory[]
  tables      Table[]
  qrCodes     QRCode[]
  orders      Order[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([slug])
}

model MenuCategory {
  id           String       @id @default(cuid())
  name         String
  description  String?
  restaurantId String
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  items        MenuItem[]
  sortOrder    Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([restaurantId])
}

model MenuItem {
  id          String       @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String?
  categoryId  String
  category    MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  available   Boolean      @default(true)
  customization Json       @default("{}")
  sortOrder   Int          @default(0)
  orderItems  OrderItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([categoryId])
}

model Table {
  id           String     @id @default(cuid())
  number       String
  capacity     Int        @default(4)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  qrCode       QRCode?
  orders       Order[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([restaurantId, number])
  @@index([restaurantId])
}

model QRCode {
  id           String     @id @default(cuid())
  shortCode    String     @unique
  tableId      String     @unique
  table        Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  imageData    String     @db.Text
  scans        Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([shortCode])
  @@index([restaurantId])
}

model Order {
  id           String      @id @default(cuid())
  orderNumber  String      @unique
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  tableId      String?
  table        Table?      @relation(fields: [tableId], references: [id], onDelete: SetNull)
  items        OrderItem[]
  total        Float
  status       OrderStatus @default(PENDING)
  customerName String?
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([restaurantId])
  @@index([tableId])
  @@index([orderNumber])
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  quantity   Int
  price      Float
  notes      String?
  createdAt  DateTime @default(now())

  @@index([orderId])
  @@index([menuItemId])
}
